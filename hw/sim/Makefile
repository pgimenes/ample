
include $(shell cocotb-config --makefiles)/Makefile.inc

include sources.mk

TOPLEVEL_LANG ?=verilog
TEST_RUNNER   ?=runner
MODULE        ?=runner
TOPLEVEL      ?=top_wrapper_tb

CMD_BIN := vsim

VSIM_LIB_OPTS = $(addprefix -L , $(VSIM_LIBS))

ifdef MODELSIM_BIN_DIR
    CMD := $(shell :; command -v $(MODELSIM_BIN_DIR)/$(CMD_BIN) 2>/dev/null)
else
    # auto-detect bin dir from system path
    CMD := $(shell :; command -v $(CMD_BIN) 2>/dev/null)
endif

ifeq (, $(CMD))
    $(error Unable to locate command >$(CMD_BIN)<)
endif

ifeq ($(GUI),1)
    CMD += -gui
    VSIM_ARGS += -onfinish stop
else
    CMD += -c
    VSIM_ARGS += -onfinish exit
endif

ifeq ($(PYTHON_ARCH),64bit)
    CMD += -64
endif

RTL_LIBRARY ?= work

TOPLEVEL_LIBRARY ?= $(RTL_LIBRARY)
TOPLEVEL := "$(TOPLEVEL_LIBRARY).$(TOPLEVEL)"

ifndef VLOG_ARGS
    VLOG_ARGS = +define+SIMULATION -timescale $(COCOTB_HDL_TIMEUNIT)/$(COCOTB_HDL_TIMEPRECISION) -mfcu
endif

COMPILE_ARGS += +acc

ifdef VERILOG_INCLUDE_DIRS
    VLOG_ARGS += $(addprefix +incdir+, $(VERILOG_INCLUDE_DIRS))
endif

# below allows for maintaining legacy syntax as well as enables using cross-simulator vars COMPILE_ARGS/SIM_ARGS
VLOG_ARGS += $(COMPILE_ARGS)
VCOM_ARGS += $(COMPILE_ARGS)
VSIM_ARGS += $(SIM_ARGS)

FLI_LIB := $(shell cocotb-config --lib-name-path fli questa)
# if this target is run, then cocotb did not build the library
$(FLI_LIB):
	@echo -e "ERROR: cocotb was not installed with an FLI library, as the mti.h header could not be located.\n\
	If you installed an FLI-capable simulator after cocotb, you will need to reinstall cocotb.\n\
	Please check the cocotb documentation on ModelSim support." >&2 && exit 1

VHPI_LIB := $(shell cocotb-config --lib-name-path vhpi questa)

GPI_EXTRA :=

VHDL_GPI_INTERFACE ?= fli

ifeq ($(filter vhpi fli,$(VHDL_GPI_INTERFACE)),)
    $(error A valid value (fli or vhpi) was not provided for VHDL_GPI_INTERFACE=$(VHDL_GPI_INTERFACE))
endif

ifeq ($(TOPLEVEL_LANG),vhdl)
    VSIM_ARGS += -t $(COCOTB_HDL_TIMEPRECISION)
ifeq ($(VHDL_GPI_INTERFACE),fli)
    CUSTOM_COMPILE_DEPS += $(FLI_LIB)
    VSIM_ARGS += -foreign \"cocotb_init $(FLI_LIB)\"
else
    VSIM_ARGS += -voptargs="-access=rw+/." -foreign \"vhpi_startup_routines_bootstrap $(call to_tcl_path,$(VHPI_LIB))\"
endif
ifneq ($(VERILOG_SOURCES),)
    GPI_EXTRA :=  $(shell cocotb-config --lib-name-path vpi questa):cocotbvpi_entry_point
endif

else ifeq ($(TOPLEVEL_LANG),verilog)
    VSIM_ARGS += -pli $(shell cocotb-config --lib-name-path vpi questa)
ifneq ($(VHDL_SOURCES),)
    GPI_EXTRA := $(shell cocotb-config --lib-name-path $(VHDL_GPI_INTERFACE) questa):cocotb$(VHDL_GPI_INTERFACE)_entry_point
endif

else
   $(error A valid value (verilog or vhdl) was not provided for TOPLEVEL_LANG=$(TOPLEVEL_LANG))
endif

define make_lib
  echo "if [file exists $(SIM_BUILD)/$(LIB)] {vdel -lib $(SIM_BUILD)/$(LIB) -all}" >> $@;
  echo "vlib $(SIM_BUILD)/$(LIB)" >> $@;
  echo "vmap $(LIB) $(SIM_BUILD)/$(LIB)" >> $@;
  echo "vcom -work $(LIB) $(VCOM_ARGS) $(call to_tcl_path,$(VHDL_SOURCES_$(LIB)))" >> $@;
endef

$(SIM_BUILD)/runsim.do : $(VHDL_SOURCES) $(VERILOG_SOURCES) $(CUSTOM_COMPILE_DEPS) $(CUSTOM_SIM_DEPS) | $(SIM_BUILD)
	# Make sure all libs in SOURCES_VHDL_* are mentioned in VHDL_LIB_ORDER and vice versa
	$(foreach LIB, $(VHDL_LIB_ORDER), $(check_vhdl_sources))
	$(foreach SOURCES_VAR, $(filter VHDL_SOURCES_%, $(.VARIABLES)), $(check_lib_order))

	@echo "# Autogenerated file" > $@
	@echo "onerror {" >> $@
	@echo "	quit -f -code 1" >> $@
	@echo "}" >> $@
	@echo "vmap -c" >> $@
	$(foreach LIB, $(VHDL_LIB_ORDER), $(make_lib))
	@echo "if [file exists $(SIM_BUILD)/$(RTL_LIBRARY)] {vdel -lib $(SIM_BUILD)/$(RTL_LIBRARY) -all}" >> $@
	@echo "vlib $(SIM_BUILD)/$(RTL_LIBRARY)" >> $@
	@echo "vmap $(RTL_LIBRARY) $(SIM_BUILD)/$(RTL_LIBRARY)" >> $@
ifneq ($(VHDL_SOURCES),)
	@echo "vcom -work $(RTL_LIBRARY) $(VCOM_ARGS) $(call to_tcl_path,$(VHDL_SOURCES))" >> $@
endif
ifneq ($(VERILOG_SOURCES),)
	@echo "vlog -work $(RTL_LIBRARY) -L axi_vip_v1_1_6 -L xilinx_vip +define+SIMULATION -sv $(VLOG_ARGS) $(EXTRA_ARGS) $(call to_tcl_path,$(VERILOG_SOURCES))" >> $@
endif
ifdef SCRIPT_FILE
	@echo "do $(SCRIPT_FILE)" >> $@
endif
	@echo "vsim $(VSIM_LIB_OPTS) $(VSIM_ARGS) $(EXTRA_ARGS) $(PLUSARGS) $(SIM_BUILD)/$(TOPLEVEL) $(SIM_BUILD)/$(TOPLEVEL_LIBRARY).glbl" >> $@
ifeq ($(WAVES),1)
	@echo "log -recursive /*" >> $@
endif
ifeq ($(GUI),1)
	@echo "add log -r *" >> $@
else
	@echo "onbreak resume" >> $@
	@echo "set NumericStdNoWarnings 1" >> $@
	@echo "set StdArithNoWarnings 1" >> $@
	@echo "run -all" >> $@
	@echo "quit" >> $@
endif

$(COCOTB_RESULTS_FILE): $(SIM_BUILD)/runsim.do
	$(RM) $(COCOTB_RESULTS_FILE)

	set -o pipefail; MODULE=$(TEST_RUNNER) TESTCASE=$(TESTCASE) TOPLEVEL=$(TOPLEVEL) \
	GPI_EXTRA=$(GPI_EXTRA) TOPLEVEL_LANG=$(TOPLEVEL_LANG) \
	$(SIM_CMD_PREFIX) $(CMD) $(RUN_ARGS) -do $(SIM_BUILD)/runsim.do $(PLUSARGS) 2>&1 | tee $(SIM_BUILD)/sim.log

	$(call check_for_results_file)

# Generate libraries
$(SIM_BUILD)/libs.do: | $(SIM_BUILD)
	@echo "vmap -c" >> $@
	# @echo "if [file exists $(SIM_BUILD)/$(RTL_LIBRARY)] {vdel -lib $(SIM_BUILD)/$(RTL_LIBRARY) -all}" >> $@
	# $(foreach LIB, $(VHDL_LIB_ORDER), $(make_lib))
	@echo "vlib $(SIM_BUILD)/$(RTL_LIBRARY)" >> $@
	@echo "vmap $(RTL_LIBRARY) $(SIM_BUILD)/$(RTL_LIBRARY)" >> $@

# Generate compile script
$(SIM_BUILD)/compile.do: $(SIM_BUILD)/libs.do | $(SIM_BUILD)
ifneq ($(VHDL_SOURCES),)
	@echo "vcom -work $(RTL_LIBRARY) $(VCOM_ARGS) $(call to_tcl_path,$(VHDL_SOURCES)) -l compile_vhdl.log" >> $@
endif
ifneq ($(VERILOG_SOURCES),)
	@echo "vlog -work $(RTL_LIBRARY) -L axi_vip_v1_1_6 -L xilinx_vip -sv $(VLOG_ARGS) $(EXTRA_ARGS) $(call to_tcl_path,$(VERILOG_SOURCES)) -l compile_vlog.log" >> $@
endif

# Generate optimization script
$(SIM_BUILD)/opt.do: $(SIM_BUILD)/libs.do $(SIM_BUILD)/compile.do | $(SIM_BUILD)
	@echo "vopt +acc -l opt.log $(VSIM_LIB_OPTS) -work $(TOPLEVEL_LIBRARY) $(SIM_BUILD)/$(TOPLEVEL) $(SIM_BUILD)/$(TOPLEVEL_LIBRARY).glbl -o $(TOPLEVEL_LIBRARY)_opt" >> $@


# Generate simulation script
$(SIM_BUILD)/simulate.do: $(SIM_BUILD)/opt.do $(SIM_BUILD)/compile.do $(SIM_BUILD)/libs.do | $(SIM_BUILD)
	@echo "onbreak resume" >> $@
	@echo "set NumericStdNoWarnings 1" >> $@
	@echo "set StdArithNoWarnings 1" >> $@
	# @echo "log -recursive /*" >> $@
	# @echo "add log -r *" >> $@
	@echo "do waves.do" >> $@
	@echo "run -all" >> $@

build: $(SIM_BUILD)/libs.do $(SIM_BUILD)/compile.do $(SIM_BUILD)/opt.do
	source $(WORKAREA)/scripts/add_hash.sh
	source $(SIM_BUILD)/libs.do
	source $(SIM_BUILD)/compile.do
	source $(SIM_BUILD)/opt.do

run_sim: $(SIM_BUILD)/simulate.do
	set -o pipefail; LIBPYTHON_LOC=$(shell cocotb-config --libpython) MODULE=$(TEST_RUNNER) TESTCASE=$(TESTCASE) TOPLEVEL=$(TOPLEVEL) \
	GPI_EXTRA=$(GPI_EXTRA) TOPLEVEL_LANG=$(TOPLEVEL_LANG) \
	$(SIM_CMD_PREFIX) $(CMD) $(VSIM_ARGS) \
	$(RUN_ARGS) \
	$(TOPLEVEL_LIBRARY).$(TOPLEVEL_LIBRARY)_opt \
	-do $(SIM_BUILD)/simulate.do \
	$(PLUSARGS) 2>&1 | tee $(SIM_BUILD)/simulate.log

libs: $(SIM_BUILD)/libs.do
comp: $(SIM_BUILD)/compile.do
opt: $(SIM_BUILD)/opt.do

clean::
	$(RM) -r $(SIM_BUILD)